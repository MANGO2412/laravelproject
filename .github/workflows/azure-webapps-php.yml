# This workflow will build and push a PHP application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-php?pivots=platform-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and PHP_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples


name:  Build and deploy PHP app to Azure Web App

on:
  push:
    branches:
      - main # Cambia "main" si tu rama principal tiene otro nombre

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Configura el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configura PHP y Composer
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1 # Cambia según tu versión de PHP
          extensions: mbstring, tokenizer, xml, ctype, json, bcmath, curl
          tools: composer

      # 3. Instala las dependencias de Composer
      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader

      # 4. Configura Node.js y compila assets
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Cambia según tu versión de Node.js

      - name: Install and build assets
        run: |
          npm install
          npm run prod

      # 5. Configura permisos de las carpetas necesarias
      - name: Set permissions for storage and cache
        run: |
          chmod -R 775 storage bootstrap/cache
          chown -R www-data:www-data storage bootstrap/cache

      # 6. Publica el proyecto en Azure
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: "TU_APP_SERVICE_NAME" # Nombre de tu App Service en Azure
          slot-name: "production"
          publish-profile:  ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_F60066773D9943A8979130CA86BC6FCE }}

      # 7. Ejecuta migraciones de la base de datos (opcional)
      - name: Run database migrations
        run: php artisan migrate --force



