# This workflow will build and push a PHP application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-php?pivots=platform-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and PHP_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples


name: Build and deploy Laravel app to Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: laravelproject   # Nombre de tu aplicación en Azure
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # Ruta del proyecto, por defecto el root del repositorio
  PHP_VERSION: '8.x'                  # Versión de PHP a utilizar

permissions:
  contents: read

jobs:
  
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - uses: actions/checkout@v4

      # 2. Configurar PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, tokenizer, xml, ctype, json, bcmath, curl
          tools: composer

      # 3. Verificar existencia de composer.json
      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: 'composer.json'

      # 4. Configurar caché de Composer
      - name: Get Composer Cache Directory
        id: composer-cache
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Set up dependency caching for faster installs
        uses: actions/cache@v3
        if: steps.check_files.outputs.files_exists == 'true'
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # 5. Instalar dependencias con Composer
      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      # 6. Configurar Node.js y compilar assets de Laravel
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Cambiar si se usa otra versión de Node.js

      - name: Install and build assets
        run: |
          npm install
          npm run prod

      # 7. Ajustar permisos de carpetas necesarias
      - name: Set permissions for storage and cache
        run: |
          chmod -R 775 storage bootstrap/cache
          chown -R www-data:www-data storage bootstrap/cache

      # 8. Subir artefactos para el job de despliegue
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: laravel-app
          path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # 1. Descargar artefactos del job de build
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: laravel-app

      # 2. Desplegar a Azure Web App
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_F60066773D9943A8979130CA86BC6FCE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      # 3. Ejecutar migraciones de Laravel (opcional)
      - name: Run database migrations
        run: php artisan migrate --force
